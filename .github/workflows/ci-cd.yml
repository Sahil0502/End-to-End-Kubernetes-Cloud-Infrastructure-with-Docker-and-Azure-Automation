name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  CONTAINER_NAME: k8s-azure-app
  DEPLOYMENT_MANIFEST_PATH: 'k8s/deployment.yaml'

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linting
      run: npm run lint
    
    - name: Run tests
      run: npm test
    
    - name: Run security audit
      run: npm audit --audit-level moderate || echo "Audit completed with warnings"

  build-and-push:
    needs: lint-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Check for Azure secrets
      id: check-secrets
      run: |
        if [ -n "${{ secrets.ACR_NAME }}" ] && [ -n "${{ secrets.ACR_USERNAME }}" ] && [ -n "${{ secrets.ACR_PASSWORD }}" ]; then
          echo "has-azure-secrets=true" >> $GITHUB_OUTPUT
        else
          echo "has-azure-secrets=false" >> $GITHUB_OUTPUT
          echo "::warning::Azure secrets not configured. Skipping build and push."
        fi
    
    - name: Build Docker image
      run: |
        docker build . -t ${{ env.CONTAINER_NAME }}:${{ github.sha }}
        docker build . -t ${{ env.CONTAINER_NAME }}:latest
    
    - name: Azure Container Registry Login
      if: steps.check-secrets.outputs.has-azure-secrets == 'true'
      uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.ACR_NAME }}.azurecr.io
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}
    
    - name: Tag and push to ACR
      if: steps.check-secrets.outputs.has-azure-secrets == 'true'
      run: |
        docker tag ${{ env.CONTAINER_NAME }}:${{ github.sha }} ${{ secrets.ACR_NAME }}.azurecr.io/${{ env.CONTAINER_NAME }}:${{ github.sha }}
        docker tag ${{ env.CONTAINER_NAME }}:latest ${{ secrets.ACR_NAME }}.azurecr.io/${{ env.CONTAINER_NAME }}:latest
        docker push ${{ secrets.ACR_NAME }}.azurecr.io/${{ env.CONTAINER_NAME }}:${{ github.sha }}
        docker push ${{ secrets.ACR_NAME }}.azurecr.io/${{ env.CONTAINER_NAME }}:latest

  deploy-to-aks:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Check for AKS secrets
      id: check-aks-secrets
      run: |
        if [ -n "${{ secrets.AZURE_CREDENTIALS }}" ] && [ -n "${{ secrets.RESOURCE_GROUP }}" ] && [ -n "${{ secrets.CLUSTER_NAME }}" ]; then
          echo "has-aks-secrets=true" >> $GITHUB_OUTPUT
        else
          echo "has-aks-secrets=false" >> $GITHUB_OUTPUT
          echo "::warning::AKS secrets not configured. Skipping deployment."
        fi
    
    - name: Azure Login
      if: steps.check-aks-secrets.outputs.has-aks-secrets == 'true'
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Set up kubectl
      if: steps.check-aks-secrets.outputs.has-aks-secrets == 'true'
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
    
    - name: Get AKS credentials
      if: steps.check-aks-secrets.outputs.has-aks-secrets == 'true'
      run: |
        az aks get-credentials --resource-group ${{ secrets.RESOURCE_GROUP }} --name ${{ secrets.CLUSTER_NAME }}
    
    - name: Create ACR secret
      if: steps.check-aks-secrets.outputs.has-aks-secrets == 'true'
      run: |
        kubectl create secret docker-registry acr-secret \
          --docker-server=${{ secrets.ACR_NAME }}.azurecr.io \
          --docker-username=${{ secrets.ACR_USERNAME }} \
          --docker-password=${{ secrets.ACR_PASSWORD }} \
          --docker-email=noreply@example.com \
          --dry-run=client -o yaml | kubectl apply -f -
    
    - name: Deploy to AKS
      if: steps.check-aks-secrets.outputs.has-aks-secrets == 'true'
      run: |
        # Create a copy of deployment manifest and replace placeholders
        cp ${{ env.DEPLOYMENT_MANIFEST_PATH }} deployment-temp.yaml
        sed -i 's|\${ACR_NAME}|${{ secrets.ACR_NAME }}|g' deployment-temp.yaml
        sed -i 's|\${IMAGE_TAG}|${{ github.sha }}|g' deployment-temp.yaml
        
        # Apply Kubernetes manifests
        kubectl apply -f k8s/configmap.yaml
        kubectl apply -f deployment-temp.yaml
        kubectl apply -f k8s/service.yaml
        kubectl apply -f k8s/ingress.yaml
        
        # Wait for deployment to complete
        kubectl rollout status deployment/k8s-azure-app --timeout=300s
    
    - name: Verify deployment
      if: steps.check-aks-secrets.outputs.has-aks-secrets == 'true'
      run: |
        kubectl get pods -l app=k8s-azure-app
        kubectl get services
        kubectl get ingress

  security-scan:
    needs: lint-and-test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Build image for scanning
      run: |
        docker build . -t local-scan-image:latest
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'local-scan-image:latest'
        format: 'sarif'
        output: 'trivy-results.sarif'
        exit-code: '0'
    
    - name: Upload Trivy scan results to GitHub Security
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
