name: Basic CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test-and-validate:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install dependencies
      run: npm install
    
    - name: Run tests
      run: npm test
    
    - name: Build Docker image (local test)
      run: |
        docker build . -t k8s-azure-app:test
        echo "✅ Docker build successful"
    
    - name: Test Docker container
      run: |
        # Start container in background
        docker run -d -p 3000:3000 --name test-container k8s-azure-app:test
        
        # Wait for container to start
        sleep 5
        
        # Test endpoints
        curl -f http://localhost:3000/ || exit 1
        curl -f http://localhost:3000/health || exit 1
        curl -f http://localhost:3000/api/info || exit 1
        
        # Cleanup
        docker stop test-container
        docker rm test-container
        
        echo "✅ Container tests passed"
    
    - name: Validate Kubernetes manifests
      run: |
        # Install kubectl for basic YAML validation
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
        
        # Validate manifests using kubectl dry-run (works without cluster)
        echo "Validating Kubernetes manifests..."
        
        # Prepare deployment file with placeholders replaced
        sed 's/\${ACR_NAME}/test-acr/g; s/\${IMAGE_TAG}/test-tag/g' k8s/deployment.yaml > k8s/deployment-test.yaml
        
        # Validate YAML syntax and basic structure
        kubectl --dry-run=client apply -f k8s/configmap.yaml --validate=false && echo "✅ ConfigMap syntax valid"
        kubectl --dry-run=client apply -f k8s/deployment-test.yaml --validate=false && echo "✅ Deployment syntax valid"
        kubectl --dry-run=client apply -f k8s/service.yaml --validate=false && echo "✅ Service syntax valid"
        kubectl --dry-run=client apply -f k8s/ingress.yaml --validate=false && echo "✅ Ingress syntax valid"
        
        # Basic YAML validation using yq
        sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
        sudo chmod +x /usr/local/bin/yq
        
        yq eval k8s/configmap.yaml > /dev/null && echo "✅ ConfigMap YAML structure valid"
        yq eval k8s/deployment-test.yaml > /dev/null && echo "✅ Deployment YAML structure valid"
        yq eval k8s/service.yaml > /dev/null && echo "✅ Service YAML structure valid"
        yq eval k8s/ingress.yaml > /dev/null && echo "✅ Ingress YAML structure valid"
        
        echo "✅ All Kubernetes manifests validated successfully"
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: '1.5.0'
    
    - name: Validate Terraform
      run: |
        cd terraform
        
        # Create test terraform.tfvars
        cat > terraform.tfvars << EOF
        project_name = "test-project"
        location = "East US"
        environment = "test"
        EOF
        
        # Initialize and validate
        terraform init
        terraform validate
        terraform fmt -check
        
        echo "✅ Terraform configuration is valid"
    
    - name: Security scan
      run: |
        # Basic security checks
        echo "🔍 Running basic security checks..."
        
        # Check for common security issues in Dockerfile
        if grep -q "USER root" Dockerfile; then
          echo "⚠️  Warning: Running as root user in Dockerfile"
        else
          echo "✅ Good: Not running as root user"
        fi
        
        if grep -q "RUN.*sudo" Dockerfile; then
          echo "⚠️  Warning: Using sudo in Dockerfile"
        else
          echo "✅ Good: No sudo usage in Dockerfile"
        fi
        
        # Check Node.js dependencies for known vulnerabilities
        npm audit --audit-level high || echo "✅ npm audit completed"
        
        echo "✅ Security scan completed"

  setup-check:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Check project setup
      run: |
        echo "## 🚀 Project Setup Status" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Check required files
        echo "### Required Files:" >> $GITHUB_STEP_SUMMARY
        for file in Dockerfile package.json server.js; do
          if [ -f "$file" ]; then
            echo "- ✅ $file" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ❌ $file (missing)" >> $GITHUB_STEP_SUMMARY
          fi
        done
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Kubernetes Manifests:" >> $GITHUB_STEP_SUMMARY
        for file in k8s/deployment.yaml k8s/service.yaml k8s/ingress.yaml k8s/configmap.yaml; do
          if [ -f "$file" ]; then
            echo "- ✅ $file" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ❌ $file (missing)" >> $GITHUB_STEP_SUMMARY
          fi
        done
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Terraform Files:" >> $GITHUB_STEP_SUMMARY
        for file in terraform/main.tf terraform/variables.tf terraform/outputs.tf terraform/aks.tf; do
          if [ -f "$file" ]; then
            echo "- ✅ $file" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ❌ $file (missing)" >> $GITHUB_STEP_SUMMARY
          fi
        done
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Next Steps:" >> $GITHUB_STEP_SUMMARY
        echo "1. 📋 Review the [GitHub Secrets Setup Guide](./GITHUB_SECRETS_SETUP.md)" >> $GITHUB_STEP_SUMMARY
        echo "2. 🔐 Configure Azure authentication secrets" >> $GITHUB_STEP_SUMMARY
        echo "3. 🏗️ Deploy infrastructure using Terraform" >> $GITHUB_STEP_SUMMARY
        echo "4. 🚀 Enable full CI/CD pipeline" >> $GITHUB_STEP_SUMMARY
