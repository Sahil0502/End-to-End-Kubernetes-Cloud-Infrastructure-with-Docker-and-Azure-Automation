name: Infrastructure Deployment

on:
  push:
    branches: [ main ]
    paths: [ 'terraform/**' ]
  pull_request:
    branches: [ main ]
    paths: [ 'terraform/**' ]
  workflow_dispatch:

env:
  TF_VERSION: '1.5.0'
  TF_WORKING_DIR: './terraform'

jobs:
  terraform-plan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TF_VERSION }}
    
    - name: Check for Terraform secrets
      id: check-secrets
      run: |
        if [ -n "${{ secrets.ARM_CLIENT_ID }}" ] && [ -n "${{ secrets.ARM_CLIENT_SECRET }}" ] && [ -n "${{ secrets.ARM_SUBSCRIPTION_ID }}" ] && [ -n "${{ secrets.ARM_TENANT_ID }}" ]; then
          echo "has-terraform-secrets=true" >> $GITHUB_OUTPUT
        else
          echo "has-terraform-secrets=false" >> $GITHUB_OUTPUT
          echo "::warning::Terraform secrets not configured. Please set ARM_CLIENT_ID, ARM_CLIENT_SECRET, ARM_SUBSCRIPTION_ID, and ARM_TENANT_ID."
        fi
    
    - name: Terraform Init
      working-directory: ${{ env.TF_WORKING_DIR }}
      run: |
        # Create a minimal terraform.tfvars for validation
        cat > terraform.tfvars << EOF
        project_name = "k8s-azure-project"
        location = "East US"
        environment = "dev"
        EOF
        terraform init
    
    - name: Terraform Validate
      working-directory: ${{ env.TF_WORKING_DIR }}
      run: terraform validate
    
    - name: Terraform Plan
      if: steps.check-secrets.outputs.has-terraform-secrets == 'true'
      working-directory: ${{ env.TF_WORKING_DIR }}
      run: |
        terraform plan -no-color -out=tfplan
      env:
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
    
    - name: Upload Terraform Plan
      if: steps.check-secrets.outputs.has-terraform-secrets == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: terraform-plan
        path: ${{ env.TF_WORKING_DIR }}/tfplan

  terraform-apply:
    needs: terraform-plan
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Check for Terraform secrets
      id: check-secrets
      run: |
        if [ -n "${{ secrets.ARM_CLIENT_ID }}" ] && [ -n "${{ secrets.ARM_CLIENT_SECRET }}" ] && [ -n "${{ secrets.ARM_SUBSCRIPTION_ID }}" ] && [ -n "${{ secrets.ARM_TENANT_ID }}" ]; then
          echo "has-terraform-secrets=true" >> $GITHUB_OUTPUT
        else
          echo "has-terraform-secrets=false" >> $GITHUB_OUTPUT
          echo "::warning::Terraform secrets not configured. Skipping apply."
        fi
    
    - name: Setup Terraform
      if: steps.check-secrets.outputs.has-terraform-secrets == 'true'
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TF_VERSION }}
    
    - name: Download Terraform Plan
      if: steps.check-secrets.outputs.has-terraform-secrets == 'true'
      uses: actions/download-artifact@v3
      with:
        name: terraform-plan
        path: ${{ env.TF_WORKING_DIR }}
    
    - name: Terraform Init
      if: steps.check-secrets.outputs.has-terraform-secrets == 'true'
      working-directory: ${{ env.TF_WORKING_DIR }}
      run: terraform init
    
    - name: Terraform Apply
      if: steps.check-secrets.outputs.has-terraform-secrets == 'true'
      working-directory: ${{ env.TF_WORKING_DIR }}
      run: terraform apply tfplan
      env:
        ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
    
    - name: Output Infrastructure Details
      if: steps.check-secrets.outputs.has-terraform-secrets == 'true'
      working-directory: ${{ env.TF_WORKING_DIR }}
      run: |
        echo "## Infrastructure Deployment Complete" >> $GITHUB_STEP_SUMMARY
        echo "### AKS Cluster Details" >> $GITHUB_STEP_SUMMARY
        echo "- **Cluster Name**: $(terraform output -raw aks_cluster_name)" >> $GITHUB_STEP_SUMMARY
        echo "- **Resource Group**: $(terraform output -raw resource_group_name)" >> $GITHUB_STEP_SUMMARY
        echo "- **ACR Name**: $(terraform output -raw acr_name)" >> $GITHUB_STEP_SUMMARY
